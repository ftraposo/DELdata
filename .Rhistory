library(usethis)
usethis::use_r("get_del_data")
devtools::document()
pkgload::dev_help('get_del_data')
devtools::load_all()
devtools::build()
devtools::load_all()
devtools::check()
devtools::build()
usethis::use_vignette("my_vignette")
use_data_raw("dois")
all_doi <- read_csv("~/Library/CloudStorage/Dropbox/PAPERS/5_DEL data paper/all_doi.csv")
all_doi <- read_csv("~/Library/CloudStorage/Dropbox/PAPERS/5_DEL data paper/all_doi.csv")
library(readr)
all_doi <- read_csv("~/Library/CloudStorage/Dropbox/PAPERS/5_DEL data paper/all_doi.csv")
View(all_doi)
all_doi <- all_doi %>%
filter(file = "Data")
library(tidyverse)
View(all_doi)
all_doi <- all_doi %>%
filter(file = "Data")
all_doi <- all_doi %>%
filter(file == "Data")
all_doi <- all_doi %>%
select(-c(1))
all_doi <- all_doi %>%
mutate(file = case_when(
str_detect(label, 'Data') ~ "Data",
str_detect(label, 'data') ~ "Data",
str_detect(label, 'Datatable.xlsx') ~ "Datatable",
TRUE ~ NA_character_  # Default case if none of the above match
))
all_doi <- all_doi %>%
mutate(file = case_when(
str_detect(label, regex('Data', ignore_case = TRUE)) ~ "Data",  # Captures 'Data' and 'data'
str_detect(label, fixed('Datatable.xlsx')) ~ "Datatable",       # Specifically captures 'Datatable.xlsx'
str_detect(label, fixed('Datatable.xls')) ~ "Datatable",        # Specifically captures 'Datatable.xls'
TRUE ~ NA_character_  # Default case if none of the above match
))
View(all_doi)
all_doi <- all_doi %>%
mutate(file = case_when(
str_detect(label, regex('Data', ignore_case = TRUE)) ~ "Data",  # Captures 'Data' and 'data'
str_detect(label, fixed('_Datatable.xls')) ~ "Datatable",       # Specifically captures 'Datatable.xlsx'
str_detect(label, fixed('_Datatable.xlsx')) ~ "Datatable",        # Specifically captures 'Datatable.xls'
TRUE ~ NA_character_  # Default case if none of the above match
))
all_doi <- all_doi %>%
mutate(label = str_trim(label),  # Trim whitespace from the label
file = case_when(
str_detect(label, regex("Data", ignore_case = TRUE)) ~ "Data",  # Match 'Data' or 'data' (case-insensitive)
str_detect(label, regex("Datatable\\.xlsx$", ignore_case = TRUE)) ~ "Datatable",  # Match 'Datatable.xlsx' exactly
str_detect(label, regex("Datatable\\.xls$", ignore_case = TRUE)) ~ "Datatable",   # Match 'Datatable.xls' exactly
TRUE ~ NA_character_  # Default case if none of the above match
))
# Display the output
print(all_doi)
all_doi <- all_doi %>%
mutate(label = str_trim(label),  # Trim whitespace from the label
file = case_when(
str_detect(label, regex("Data", ignore_case = TRUE)) ~ "Data",  # Match 'Data' or 'data' (case-insensitive)
str_detect(label, regex("Datatable\\.xlsx$", ignore_case = TRUE)) ~ "Datatable",  # Match 'Datatable.xlsx' exactly
str_detect(label, regex("Datatable\\.xls$", ignore_case = TRUE)) ~ "Datatable",   # Match 'Datatable.xls' exactly
TRUE ~ NA_character_  # Default case if none of the above match
))
# Display the output
print(all_doi)
all_doi <- all_doi %>%
mutate(label = str_trim(label),
file = case_when(
str_detect(label, regex("Data", ignore_case = TRUE)) ~ "Data",
str_detect(label, regex("Datatable\\.xlsx$", ignore_case = TRUE)) ~ "Datatable",
str_detect(label, regex("Datatable\\.xls$", ignore_case = TRUE)) ~ "Datatable",
TRUE ~ NA_character_
))
# Print rows that were not matched
print(all_doi %>% filter(is.na(file)))
all_doi <- all_doi |>
mutate(id = str_replace(id, "doi:", ""))
# Print rows that were not matched
all_doi$label
paste(shQuote(all_doi$label), collapse=", ")
remove_datatables <- c('DEL_Panel_France_Wave_1_2019_Datatable.xlsx', 'DEL_Panel_UnitedStates_Wave_1_2019_Datatable.xlsx',
'DEL_Panel_Germany_Wave_1_Datatable.xlsx', 'DEL_Panel_GreatBritain_Wave_1_2019_Datatable.xlsx',
'DEL_Panel_France_Wave_2_2020_Datatable.xls','DEL_Panel_Germany_Wave_2_2020_Datatable.xlsx',
'DEL_Panel_GreatBritain_Wave_2_2020_Datatable.xls','DEL_Panel_UnitedStates_Wave_2_2020_Datatable.xlsx',
'DEL_Panel_UnitedStates_Wave_3_2021_Datatable.xls', 'DEL_Panel_Germany_Wave_3_2021_Datatable.xls',
'DEL_Panel_France_Wave_3_2021_Datatable.xls', 'DEL_Panel_GreatBritain_Wave_3_2021_Datatable.xls',
'DEL_Panel_UnitedStates_Wave_4_2022_Datatable.xls', 'DEL_Panel_Germany_Wave_4_2022_Datatable.xls',
'DEL_Panel_GreatBritain_Wave_4_2022_Datatable.xls',  'DEL_Panel_France_Wave_4_2022_Datatable.xls',
'DEL_Panel_Germany_Wave_5_2023_Datatable.xls',  'DEL_Panel_France_Wave_5_2023_Datatable.xls',
'DEL_Panel_GreatBritain_Wave_5_2023_Datatable.xls', 'DEL_Panel_UnitedStates_Wave_5_2023_Datatable.xls',
'DEL_Tracker_GreatBritain_Wave_1_2020_Datatable.xls', 'DEL_Tracker_Germany_Wave_2_2020_Datatable.xls',
'DEL_Tracker_UnitedStates_Wave_1_2020_Datatable.xls', 'DEL_Tracker_UnitedStates_Wave_2_2020_Datatable.xls',
'DEL_Tracker_GreatBritain_Wave_2_2020_Datatable.xls', 'DEL_Tracker_France_Wave_1_2020_Datatable.xls',
'DEL_Tracker_France_Wave_2_2020_Datatable.xls',  'DEL_Tracker_Germany_Wave_1_2020_Datatable.xls',
'DEL_Tracker_Germany_Wave_4_2021_Datatable.xlsx', 'DEL_Tracker_GreatBritain_Wave_3_2021_Datatable.xlsx',
'DEL_Tracker_Germany_Wave_3_2021_Datatable.xlsx',  'DEL_Tracker_France_Wave_4_2021_Datatable.xlsx',
'DEL_Tracker_UnitedStates_Wave_4_2021_Datatable.xlsx','DEL_Tracker_GreatBritain_Wave_4_2021_Datatable.xlsx',
'DEL_Tracker_UnitedStates_Wave_3_2021_Datatable.xlsx', 'DEL_Tracker_France_Wave_3_2021_Datatable.xlsx',
'DEL_Tracker_GreatBritain_Wave_5_2022_Datatable.xlsx', 'DEL_Tracker_Germany_Wave_5_2020_Datatable.xlsx',
'DEL_Tracker_UnitedStates_Wave_5_2022_Datatable.xlsx',  'DEL_Tracker_France_Wave_5_2022_Datatable.xlsx',
'DEL_Tracker_Germany_Wave_6_2022_Datatable.xlsx', 'DEL_Tracker_UnitedStates_Wave_6_2022_Datatable.xlsx',
'DEL_Tracker_France_Wave_6_2022_Datatable.xlsx', 'DEL_Tracker_GreatBritain_Wave_6_2022_Datatable.xlsx',
'DEL_Tracker_France_Wave_8_2023_Datatable.xlsx','DEL_Tracker_UnitedStates_Wave_7_2023_Datatable.xlsx',
'DEL_Tracker_France_Wave_7_2023_Datatable.xlsx',  'DEL_Tracker_UnitedStates_Wave_8_2023_Datatable.xlsx',
'DEL_Tracker_Germany_Wave_8_2023_Datatable.xlsx', 'DEL_Tracker_GreatBritain_Wave_7_2023_Datatable.xlsx',
'DEL_Tracker_Germany_Wave_7_2023_Datatable.xlsx',  'DEL_Tracker_GreatBritain_Wave_8_2023_Datatable.xlsx',
'DEL_Tracker_GreatBritain_Wave_9_2024_Datatable.xls', 'DEL_Tracker_France_Wave_9_2024_Datatable.xls',
'DEL_Tracker_Germany_Wave_9_2024_Datatable.xls', 'DEL_Tracker_UnitedStates_Wave_9_2024_Datatable.xls',
'DEL_Tracker_UnitedStates_Wave10_2024_Datatable.xls', 'DEL_Tracker_GreatBritain_Wave_10_2024_Datatable.xls',
'DEL_Tracker_France_Wave_10_2024_Datatable.xls', 'DEL_Tracker_Germany_Wave_10_2024_Datatable.xls',
'DEL_Sandbox_France_Feb2020_Datatable.xls', 'DEL_Sandbox_GreatBritain_Jul2020_Datatable.xls',
'DEL_Sandbox_GreatBritain_Apr2020_Datatable.xls', 'DEL_Sandbox_Germany_Feb2020_Datatable.xls',
'DEL_Sandbox_UnitedStates_May2020_Datatable.xls',
'DEL_Sandbox_France_Jul2020_Datatable.xls', 'DEL_Sandbox_UnitedStates_Jul2020_Datatable.xls',
'DEL_Sandbox_Germany_Jul2020_Datatable.xls', 'DEL_Sandbox_France_May2021_Datatable.xls',
'DEL_Sandbox_GreatBritain_Jun2021_Datatable.xls', 'DEL_Sandbox_France_Aug2021_Datatable.xls',
'DEL_Sandbox_Germany_Jul2021_Datatable.xls', 'DEL_Sandbox_UnitedStates_Sep2021_Datatable.xls',
'DEL_Sandbox_France_Jun2022_Datatable.xls',  'DEL_Sandbox_GreatBritain_Jun2022_Datatable.xls',
'DEL_Sandbox_Germany_Jun2022_Datatable.xls',  'DEL_Sandbox_France_Jan2022_Datatable.xls',
'DEL_Sandbox_Germany_Mar2022_Datatable.xlsx', 'DEL_Sandbox_Germany_Feb2023_Datatable.xls',
'DEL_Sandbox_France_Feb2023_Datatable.xls', 'DEL_Sandbox_GreatBritain_Oct2023_Datatable.xls',
'DEL_Sandbox_Germany_Oct2023_Datatable.xls', 'DEL_Sandbox_France_May2023_Datatable.xls',
'DEL_Sandbox_GreatBritain_Feb2023_Datatable.xls', 'DEL_Sandbox_UnitedStates_Feb2023_Datatable.xls',
'DEL_Sandbox_UnitedStates_Oct2023_Datatable.xls')
remove_datatables <- c('DEL_Panel_France_Wave_1_2019_Datatable.xlsx', 'DEL_Panel_UnitedStates_Wave_1_2019_Datatable.xlsx',
'DEL_Panel_Germany_Wave_1_Datatable.xlsx', 'DEL_Panel_GreatBritain_Wave_1_2019_Datatable.xlsx',
'DEL_Panel_France_Wave_2_2020_Datatable.xls','DEL_Panel_Germany_Wave_2_2020_Datatable.xlsx',
'DEL_Panel_GreatBritain_Wave_2_2020_Datatable.xls','DEL_Panel_UnitedStates_Wave_2_2020_Datatable.xlsx',
'DEL_Panel_UnitedStates_Wave_3_2021_Datatable.xls', 'DEL_Panel_Germany_Wave_3_2021_Datatable.xls',
'DEL_Panel_France_Wave_3_2021_Datatable.xls', 'DEL_Panel_GreatBritain_Wave_3_2021_Datatable.xls',
'DEL_Panel_UnitedStates_Wave_4_2022_Datatable.xls', 'DEL_Panel_Germany_Wave_4_2022_Datatable.xls',
'DEL_Panel_GreatBritain_Wave_4_2022_Datatable.xls',  'DEL_Panel_France_Wave_4_2022_Datatable.xls',
'DEL_Panel_Germany_Wave_5_2023_Datatable.xls',  'DEL_Panel_France_Wave_5_2023_Datatable.xls',
'DEL_Panel_GreatBritain_Wave_5_2023_Datatable.xls', 'DEL_Panel_UnitedStates_Wave_5_2023_Datatable.xls',
'DEL_Tracker_GreatBritain_Wave_1_2020_Datatable.xls', 'DEL_Tracker_Germany_Wave_2_2020_Datatable.xls',
'DEL_Tracker_UnitedStates_Wave_1_2020_Datatable.xls', 'DEL_Tracker_UnitedStates_Wave_2_2020_Datatable.xls',
'DEL_Tracker_GreatBritain_Wave_2_2020_Datatable.xls', 'DEL_Tracker_France_Wave_1_2020_Datatable.xls',
'DEL_Tracker_France_Wave_2_2020_Datatable.xls',  'DEL_Tracker_Germany_Wave_1_2020_Datatable.xls',
'DEL_Tracker_Germany_Wave_4_2021_Datatable.xlsx', 'DEL_Tracker_GreatBritain_Wave_3_2021_Datatable.xlsx',
'DEL_Tracker_Germany_Wave_3_2021_Datatable.xlsx',  'DEL_Tracker_France_Wave_4_2021_Datatable.xlsx',
'DEL_Tracker_UnitedStates_Wave_4_2021_Datatable.xlsx','DEL_Tracker_GreatBritain_Wave_4_2021_Datatable.xlsx',
'DEL_Tracker_UnitedStates_Wave_3_2021_Datatable.xlsx', 'DEL_Tracker_France_Wave_3_2021_Datatable.xlsx',
'DEL_Tracker_GreatBritain_Wave_5_2022_Datatable.xlsx', 'DEL_Tracker_Germany_Wave_5_2020_Datatable.xlsx',
'DEL_Tracker_UnitedStates_Wave_5_2022_Datatable.xlsx',  'DEL_Tracker_France_Wave_5_2022_Datatable.xlsx',
'DEL_Tracker_Germany_Wave_6_2022_Datatable.xlsx', 'DEL_Tracker_UnitedStates_Wave_6_2022_Datatable.xlsx',
'DEL_Tracker_France_Wave_6_2022_Datatable.xlsx', 'DEL_Tracker_GreatBritain_Wave_6_2022_Datatable.xlsx',
'DEL_Tracker_France_Wave_8_2023_Datatable.xlsx','DEL_Tracker_UnitedStates_Wave_7_2023_Datatable.xlsx',
'DEL_Tracker_France_Wave_7_2023_Datatable.xlsx',  'DEL_Tracker_UnitedStates_Wave_8_2023_Datatable.xlsx',
'DEL_Tracker_Germany_Wave_8_2023_Datatable.xlsx', 'DEL_Tracker_GreatBritain_Wave_7_2023_Datatable.xlsx',
'DEL_Tracker_Germany_Wave_7_2023_Datatable.xlsx',  'DEL_Tracker_GreatBritain_Wave_8_2023_Datatable.xlsx',
'DEL_Tracker_GreatBritain_Wave_9_2024_Datatable.xls', 'DEL_Tracker_France_Wave_9_2024_Datatable.xls',
'DEL_Tracker_Germany_Wave_9_2024_Datatable.xls', 'DEL_Tracker_UnitedStates_Wave_9_2024_Datatable.xls',
'DEL_Tracker_UnitedStates_Wave10_2024_Datatable.xls', 'DEL_Tracker_GreatBritain_Wave_10_2024_Datatable.xls',
'DEL_Tracker_France_Wave_10_2024_Datatable.xls', 'DEL_Tracker_Germany_Wave_10_2024_Datatable.xls',
'DEL_Sandbox_France_Feb2020_Datatable.xls', 'DEL_Sandbox_GreatBritain_Jul2020_Datatable.xls',
'DEL_Sandbox_GreatBritain_Apr2020_Datatable.xls', 'DEL_Sandbox_Germany_Feb2020_Datatable.xls',
'DEL_Sandbox_UnitedStates_May2020_Datatable.xls',
'DEL_Sandbox_France_Jul2020_Datatable.xls', 'DEL_Sandbox_UnitedStates_Jul2020_Datatable.xls',
'DEL_Sandbox_Germany_Jul2020_Datatable.xls', 'DEL_Sandbox_France_May2021_Datatable.xls',
'DEL_Sandbox_GreatBritain_Jun2021_Datatable.xls', 'DEL_Sandbox_France_Aug2021_Datatable.xls',
'DEL_Sandbox_Germany_Jul2021_Datatable.xls', 'DEL_Sandbox_UnitedStates_Sep2021_Datatable.xls',
'DEL_Sandbox_France_Jun2022_Datatable.xls',  'DEL_Sandbox_GreatBritain_Jun2022_Datatable.xls',
'DEL_Sandbox_Germany_Jun2022_Datatable.xls',  'DEL_Sandbox_France_Jan2022_Datatable.xls',
'DEL_Sandbox_Germany_Mar2022_Datatable.xlsx', 'DEL_Sandbox_Germany_Feb2023_Datatable.xls',
'DEL_Sandbox_France_Feb2023_Datatable.xls', 'DEL_Sandbox_GreatBritain_Oct2023_Datatable.xls',
'DEL_Sandbox_Germany_Oct2023_Datatable.xls', 'DEL_Sandbox_France_May2023_Datatable.xls',
'DEL_Sandbox_GreatBritain_Feb2023_Datatable.xls', 'DEL_Sandbox_UnitedStates_Feb2023_Datatable.xls',
'DEL_Sandbox_UnitedStates_Oct2023_Datatable.xls')
all_doi <- all_doi |>
filter(!label %in% remove_datatables)
View(all_doi)
usethis::use_data(all_doi, overwrite = TRUE)
load("~/Library/CloudStorage/Dropbox/PAPERS/5_DEL data paper/Package/DELdata/data/all_doi.rda")
dois <- all_doi
usethis::use_data(dois, overwrite = TRUE)
View(all_doi)
use_r("data")
use_mit_license()
get_del_data <- function(country = NULL, year = NULL, type = NULL) {
# Check if 'dataverse' package is installed, if not, install it
if (!requireNamespace("dataverse", quietly = TRUE)) {
message("The 'dataverse' package is not installed. Installing now...")
install.packages("dataverse")
library(dataverse)
}
if (!requireNamespace("stringi", quietly = TRUE)) {
message("The 'stringi' package is not installed. Installing now...")
install.packages("stringi")
library(stringi)
}
if (!exists("dois")) {
stop("The 'dois' data frame is not available in the environment.")
}
if (!is.null(country)) {
dois <- dois[dois$country %in% country, ]
}
if (!is.null(year)) {
dois <- dois[dois$year %in% year, ]
}
if (!is.null(type)) {
dois <- dois[dois$type %in% type, ]
}
result_list <- list()  # Create an empty list to store data frames
for (i in seq_len(nrow(dois))) {
filename <- dois$label[i]
doi <- dois$id[i]
message("Processing DOI: ", doi)
# Add a download URL check or file type check here if needed
df <- suppressWarnings({
dataverse::get_dataframe_by_name(
filename = filename,
dataset = doi,
server = "dataverse.harvard.edu",
.f = haven::read_sav  # Ensure the function matches the file format
)
})
if (is.null(df)) {
message("Warning: df is NULL for DOI: ", doi)
next
}
df_name <- gsub("/", "_", doi)
result_list[[df_name]] <- df  # Add data frame to the result list
message("Successfully downloaded and saved as: ", df_name)
message("Structure of df for DOI ", doi, ":")
print(str(df))  # Print structure
}
return(result_list)  # Return the list of data frames
}
load_all()
install()
build_vignettes()
build_vignettes()
install()
browseVignettes(package = "DELdata")  # Replace "DELdata" with your package name
devtools::build_vignettes()
devtools::install(build_vignettes = TRUE)
browseVignettes(package = "DELdata")
devtools::document()
devtools::check()
devtools::check()
rm(list = c("get_del_data"))
rm(list = c("get_del_data"))
rm(list = c("get_del_data"))
devtools::load_all()
conflicts()
devtools::load_all()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check().
devtools::check()
body(get_del_data)
get_del_data <- function(country = NULL, year = NULL, type = NULL) {
# Check if 'dataverse' package is installed
if (!requireNamespace("dataverse", quietly = TRUE)) {
stop("Please install the 'dataverse' package.")
}
if (!requireNamespace("stringi", quietly = TRUE)) {
stop("Please install the 'stringi' package.")
}
# Check if 'dois' data frame is available
if (!exists("dois")) {
stop("The 'dois' data frame is not available in the environment.")
}
# Filter 'dois' based on input parameters
if (!is.null(country)) {
dois <- dois[dois$country %in% country, ]
}
if (!is.null(year)) {
dois <- dois[dois$year %in% year, ]
}
if (!is.null(type)) {
dois <- dois[dois$type %in% type, ]
}
result_list <- list()  # Create an empty list to store data frames
for (i in seq_len(nrow(dois))) {
filename <- dois$label[i]
doi <- dois$id[i]
message("Processing DOI: ", doi)
# Add a download URL check or file type check here if needed
df <- suppressWarnings({
dataverse::get_dataframe_by_name(
filename = filename,
dataset = doi,
server = "dataverse.harvard.edu",
.f = haven::read_sav  # Ensure the function matches the file format
)
})
if (is.null(df)) {
message("Warning: df is NULL for DOI: ", doi)
next
}
df_name <- gsub("/", "_", doi)
result_list[[df_name]] <- df  # Add data frame to the result list
message("Successfully downloaded and saved as: ", df_name)
message("Structure of df for DOI ", doi, ":")
str(df)  # Display the structure of the data frame
}
return(result_list)  # Return the list of data frames
}
get_del_data(country = "Germany", year = "2020", type = "Panel")
get_del_data(country = "France", year = "2020", type = "Panel")
get_del_data <- function(country = NULL, year = NULL, type = NULL) {
# Check if 'dataverse' package is installed
if (!requireNamespace("dataverse", quietly = TRUE)) {
stop("Please install the 'dataverse' package.")
}
if (!requireNamespace("stringi", quietly = TRUE)) {
stop("Please install the 'stringi' package.")
}
# Check if 'dois' data frame is available
if (!exists("dois")) {
stop("The 'dois' data frame is not available in the environment.")
}
# Filter 'dois' based on input parameters
if (!is.null(country)) {
dois <- dois[dois$country %in% country, ]
}
if (!is.null(year)) {
dois <- dois[dois$year %in% year, ]
}
if (!is.null(type)) {
dois <- dois[dois$type %in% type, ]
}
for (i in seq_len(nrow(dois))) {
filename <- dois$label[i]
doi <- dois$id[i]
message("Processing DOI: ", doi)
# Download the dataset
df <- suppressWarnings({
dataverse::get_dataframe_by_name(
filename = filename,
dataset = doi,
server = "dataverse.harvard.edu",
.f = haven::read_sav  # Ensure the function matches the file format
)
})
if (is.null(df)) {
message("Warning: df is NULL for DOI: ", doi)
next
}
df_name <- gsub("/", "_", doi)
assign(df_name, df, envir = .GlobalEnv)  # Load the data frame into the global environment
message("Successfully downloaded and saved as: ", df_name)
message("Structure of df for DOI ", doi, ":")
str(df)  # Display the structure of the data frame
}
}
devtools::document()  # Update documentation and NAMESPACE
devtools::load_all()  # Load your package
get_del_data(country = "France", year = "2020", type = "Panel")
get_del_data(country = "Great Britain", year = "2020", type = "Panel")
get_del_data(country = "United States", year = "2020", type = "Panel")
get_del_data(country = "United States", year = "2020", type = "Tracker")
get_del_data(country = "Germany", year = "2020", type = "Tracker")
get_del_data(country = "Germany", year = "2020", type = "Tracker")
get_del_data(country = "France", year = "2020", type = "Tracker")
get_del_data <- function(country = NULL, year = NULL, type = NULL) {
# Check if 'dataverse' package is installed
if (!requireNamespace("dataverse", quietly = TRUE)) {
stop("Please install the 'dataverse' package.")
}
if (!requireNamespace("stringi", quietly = TRUE)) {
stop("Please install the 'stringi' package.")
}
# Check if 'dois' data frame is available
if (!exists("dois")) {
stop("The 'dois' data frame is not available in the environment.")
}
# Filter 'dois' based on input parameters
if (!is.null(country)) {
dois <- dois[dois$country %in% country, ]
}
if (!is.null(year)) {
dois <- dois[dois$year %in% year, ]
}
if (!is.null(type)) {
dois <- dois[dois$type %in% type, ]
}
for (i in seq_len(nrow(dois))) {
filename <- dois$label[i]
doi <- dois$id[i]
message("Processing DOI: ", doi)
# Download the dataset
df <- suppressWarnings({
dataverse::get_dataframe_by_name(
filename = filename,
dataset = doi,
server = "dataverse.harvard.edu",
.f = haven::read_sav  # Ensure the function matches the file format
)
})
if (is.null(df)) {
message("Warning: df is NULL for DOI: ", doi)
next
}
# Create a meaningful name for the dataset
df_name <- paste0("data_",
stringi::stri_replace_all_fixed(country[1], " ", "_"), "_",  # Replace spaces with underscores
stringi::stri_replace_all_fixed(type[1], " ", "_"), "_",    # Replace spaces with underscores
year[1], "_",
i)  # Append the index to ensure uniqueness
# Assign the data frame to the global environment
assign(df_name, df, envir = .GlobalEnv)
message("Successfully downloaded and saved as: ", df_name)
message("Structure of df for DOI ", doi, ":")
str(df)  # Display the structure of the data frame
}
}
get_del_data(country = "France", year = "2020", type = "Tracker")
View(data_France_Tracker_2020_1)
View(data_France_Tracker_2020_1)
View(data_France_Tracker_2020_2)
get_del_data(country = "France", year = "2020", type = "Panel")
View(data_France_Panel_2020_1)
devtools::document()
devtools::check()
devtools::build()
get_del_data <- function(country = NULL, year = NULL, type = NULL) {
# Check if 'dataverse' package is installed
if (!requireNamespace("dataverse", quietly = TRUE)) {
stop("Please install the 'dataverse' package.")
}
if (!requireNamespace("stringi", quietly = TRUE)) {
stop("Please install the 'stringi' package.")
}
# Load the 'dois' dataset
if (!exists("dois")) {
stop("The 'dois' data frame is not available in the environment. Loading the dataset.")
# If 'dois' is part of the package, you can load it here
# data(dois, package = "YourPackageName")
}
# Filter 'dois' based on input parameters
if (!is.null(country)) {
dois <- dois[dois$country %in% country, ]
}
if (!is.null(year)) {
dois <- dois[dois$year %in% year, ]
}
if (!is.null(type)) {
dois <- dois[dois$type %in% type, ]
}
for (i in seq_len(nrow(dois))) {
filename <- dois$label[i]
doi <- dois$id[i]
message("Processing DOI: ", doi)
# Download the dataset
df <- suppressWarnings({
dataverse::get_dataframe_by_name(
filename = filename,
dataset = doi,
server = "dataverse.harvard.edu",
.f = haven::read_sav  # Ensure the function matches the file format
)
})
if (is.null(df)) {
message("Warning: df is NULL for DOI: ", doi)
next
}
# Create a meaningful name for the dataset
df_name <- paste0("data_",
stringi::stri_replace_all_fixed(country[1], " ", "_"), "_",  # Replace spaces with underscores
stringi::stri_replace_all_fixed(type[1], " ", "_"), "_",    # Replace spaces with underscores
year[1], "_",
i)  # Append the index to ensure uniqueness
# Assign the data frame to the global environment
assign(df_name, df, envir = .GlobalEnv)
message("Successfully downloaded and saved as: ", df_name)
message("Structure of df for DOI ", doi, ":")
str(df)  # Display the structure of the data frame
}
}
get_del_data(country = "France", year = "2020", type = "Panel")
devtools::build()
devtools::build()
devtools::document()  # Update documentation
devtools::check()     # Check the package
devtools::document()
devtools::check()
devtools::build()   devtools::build()
devtools::build()
devtools::document()
devtools::document()
devtools::check()
devtools::build()
devtools::install()
library(DELdata)
get_del_data(country = 'France', year = '2020', type = 'Sandbox')
devtools::build()
devtools::install()
library(DELdata)
get_del_data(country = 'France', year = '2020', type = 'Sandbox')
setwd("~/Library/CloudStorage/Dropbox/PAPERS/5_DEL data paper/Package/DELdata")
```r
## Example
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::install()
devtools::document()
pkgdown::build_site()
pkgdown::clear_site()
vpkgdown::clear_site()
pkgdown::clear_site()
pkgdown::clear_site()
